[
  {
    "id": 41095530,
    "title": "마이크로소프트의 CrowdStrike 사건 기술 분석",
    "originLink": "https://www.microsoft.com/en-us/security/blog/2024/07/27/windows-security-best-practices-for-integrating-and-managing-security-tools/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41095530",
    "commentBody": "",
    "originSummary": [
      "Windows는 통합 기능과 타사 도구를 포함한 유연한 보안 옵션을 제공하여 기업의 보안과 신뢰성을 향상시킵니다.",
      "최근 CrowdStrike의 장애는 CSagent 드라이버의 메모리 안전 문제로 추적되었으며, 이는 견고한 커널 드라이버 관리의 중요성을 강조합니다.",
      "Microsoft는 Microsoft Virus Initiative (MVI)를 통해 타사 벤더와 협력하여 보안 제품의 품질과 신뢰성을 보장하며, 커널 의존성을 줄이고 사용자 모드 보호 기능을 강화하는 데 중점을 둡니다."
    ],
    "commentSummary": [
      "마이크로소프트의 CrowdStrike 사건 분석은 보안 접근 방식을 현대화하고 중요한 보안 데이터에 접근하기 위해 커널 드라이버에 대한 의존도를 줄여야 할 필요성을 강조합니다.",
      "이번 사건은 CrowdStrike의 품질 보증 관행과 Microsoft가 제3자 벤더에 대한 커널 접근을 제한해야 하는지에 대한 논쟁을 불러일으켰습니다. 이는 공정 경쟁을 위해 EU에 의해 이전에 차단된 조치입니다.",
      "이 상황은 더 나은 배포 관행과 신뢰성을 목표로 보안 기능을 사용자 모드로 더 많이 전환하는 것의 잠재적 이점을 강조합니다."
    ],
    "points": 372,
    "commentCount": 372,
    "retryCount": 0,
    "time": 1722196542
  },
  {
    "id": 41095790,
    "title": "tolower()와 AVX-512",
    "originLink": "https://dotat.at/@/2024-07-28-tolower-avx512.html",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41095790",
    "commentBody": "",
    "originSummary": [
      "이 기사는 Rust에서 tolower() 함수에 중점을 두고 효율적인 문자열 처리를 위해 SIMD(단일 명령, 다중 데이터) 명령을 사용하는 것에 대해 논의합니다.",
      "저자는 AMD Zen 4 프로세서에서 AVX-512-BW를 실험하여 마스크된 로드와 스토어를 사용하여 긴 문자열과 짧은 문자열 모두에서 높은 성능을 달성했습니다.",
      "결과는 AVX-512-BW가 짧은 문자열을 처리하는 데 특히 효과적이며, 자동 벡터화된 코드에서 발생하는 문제 없이 부드럽고 빠른 성능을 제공한다는 것을 보여주었습니다."
    ],
    "commentSummary": [
      "Rust와 LLVM에서 '죽음의 경계를 넘는 불안전한 읽기' 트릭은 정의되지 않은 동작으로 간주되며, 이는 발생하지 않는다고 가정하는 컴파일러 최적화를 유발하여 예기치 않은 결과를 초래할 수 있습니다.",
      "인라인 어셈블리가 현재 유일한 해결책이며, 마스크 정렬 로드 내재 함수와 프리징 로드와 같은 대안이 제안되고 있습니다.",
      "경계 밖 읽기 처리에 대한 논쟁이 계속되고 있으며, 일부는 구현 정의된 동작을 옹호하고 있습니다. AVX-512의 마스크된 연산은 인텔의 시장 세분화로 인해 제한된 채택에도 불구하고 성능 이점으로 주목받고 있습니다."
    ],
    "points": 241,
    "commentCount": 118,
    "retryCount": 0,
    "time": 1722199139
  },
  {
    "id": 41097241,
    "title": "포크 없이 bash에서 작성된 ps aux",
    "originLink": "https://github.com/izabera/ps",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41097241",
    "commentBody": "",
    "originSummary": [
      "bash/Linux 직무를 위한 인터뷰 질문은 모든 프로세스 ID(PID)가 사용 중이어서 새로운 프로세스를 생성할 수 없는 상황을 처리하는 방법에 관한 것일 수 있습니다.",
      "이러한 상황에서 작동하는 `ps aux` 명령을 모방할 수 있는 도구가 언급되었으며, 유머러스하게도 보편적인 호환성을 주장하고 있습니다."
    ],
    "commentSummary": [
      "GitHub에서의 논의는 프로그래밍에서 열을 정렬하는 문제를 중심으로 진행되며, 이를 위해 Python의 f-문자열과 패딩을 사용하는 것에 중점을 둡니다.",
      "사용자들은 더 간단한 데이터 처리를 위해 YAML과 같은 대체 도구와 형식을 제안하며, Octopus Deploy와 Docker CLI와 같은 유틸리티의 JSON 출력에 대해 언급합니다.",
      "이 스레드는 또한 bash에서 PID(프로세스 ID) 소진을 처리하는 방법에 대해 다루며, 더 나은 프로세스 관리를 위해 /proc/[pid]/ 디렉토리와 `exec Python`을 사용하는 등의 권장 사항을 제시합니다."
    ],
    "points": 214,
    "commentCount": 81,
    "retryCount": 0,
    "time": 1722215457
  },
  {
    "id": 41095839,
    "title": "Three.js로 만든 축구/풋볼 패스 시각화 도구",
    "originLink": "https://statsbomb-3d-viz.vercel.app/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41095839",
    "commentBody": "",
    "originSummary": [
      "축구 패스 시각화 도구가 축구 분석을 위한 풍부한 데이터셋인 StatsBomb의 오픈 데이터를 사용하여 개발되었습니다.",
      "이 도구는 사용자가 패스 패턴을 분석하고 시각화할 수 있도록 하며, 패스 거리, 팀, 개별 선수에 대한 필터를 제공합니다.",
      "이 발전은 고급 스포츠 분석 및 시각화를 위해 오픈 데이터를 활용하는 증가하는 추세를 강조합니다."
    ],
    "commentSummary": [
      "Three.js를 사용하는 축구 패스 시각화 도구는 StatsBomb의 공개 데이터를 활용하여 패턴을 분석하고 시각화하며, 사용자가 패스 거리, 팀, 선수별로 필터링할 수 있도록 합니다.",
      "커뮤니티 피드백에는 deck.gl이나 kepler.gl과 같은 고급 시각화 도구에 대한 제안과 더 나은 분석을 위한 시간 기반 애니메이션 및 히트맵과 같은 기능이 포함되어 있습니다.",
      "사용자들은 CORS 오류와 파일 로딩의 어려움과 같은 문제를 보고했으며, 이는 사용자 경험과 오류 처리에서 잠재적인 개선 영역을 나타냅니다."
    ],
    "points": 176,
    "commentCount": 34,
    "retryCount": 0,
    "time": 1722199517
  },
  {
    "id": 41099901,
    "title": "이동 가능한 트리 CRDT와 Loro의 구현",
    "originLink": "https://loro.dev/blog/movable-tree",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41099901",
    "commentBody": "",
    "originSummary": [
      "이 기사는 협업 환경에서 Movable Tree CRDTs(충돌 없는 복제 데이터 유형)를 구현하는 데 따른 어려움과 Loro가 자식 노드 정렬을 포함한 이러한 문제를 어떻게 해결하는지에 대해 논의합니다.",
      "로로의 구현은 '복제된 트리를 위한 고가용성 이동 작업'의 알고리즘을 사용하며, 정렬을 위해 분수 인덱스 알고리즘을 통합하고, 고유한 PeerID와 지터로 충돌을 처리합니다.",
      "로로의 접근 방식은 실시간 협업과 과거 버전 체크아웃을 지원하며, 다양한 시나리오에서 높은 성능을 보여주어 협업 애플리케이션의 실제 사용에 적합합니다."
    ],
    "commentSummary": [
      "이동 가능한 트리 CRDTs(충돌 없는 복제 데이터 유형)와 Loro의 구현은 협업 환경에서 복잡한 트리 작업을 처리하는 능력으로 주목받고 있습니다.",
      "개발자들은 대규모 계층적 데이터 구조를 관리하기 위한 React Table Library와 작업 및 노트를 위한 Thymer의 멀티플레이어 편집기와 같은 실용적인 응용 프로그램에 대해 논의하고 있습니다.",
      "이 대화는 텍스트, 이미지, 3D 모델을 포함한 다양한 데이터 유형에 CRDT를 사용하는 데 있어 도전 과제와 해결책을 강조하며, 효율적인 동기화와 충돌 해결의 중요성을 강조합니다."
    ],
    "points": 175,
    "commentCount": 23,
    "retryCount": 0,
    "time": 1722255899
  },
  {
    "id": 41096486,
    "title": "LeanDojo: LLM을 사용한 Lean에서의 정리 증명",
    "originLink": "https://leandojo.org/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41096486",
    "commentBody": "",
    "originSummary": [
      "LeanDojo는 Lean Copilot을 도입하여 언어 모델(LLM)이 전술을 제안하고 증명을 검색함으로써 Lean 증명 자동화를 지원할 수 있도록 합니다.",
      "ReProver 모델은 인코더-디코더 트랜스포머를 사용하여 수학 라이브러리에서 전제를 검색하고 다음 전술을 생성하여 Lean의 내장 증명 자동화를 능가합니다.",
      "LeanDojo의 데이터셋은 광범위한 벤치마크와 세밀한 주석을 포함하고 있어 모델이 새로운 전제를 가진 정리에 일반화하고 새로운 증명을 발견할 수 있도록 보장합니다."
    ],
    "commentSummary": [
      "LeanDojo는 정리 증명 능력을 향상시키기 위해 증명 보조 도구인 Lean과 대형 언어 모델(LLM)을 통합하는 새로운 이니셔티브입니다.",
      "이 프로젝트는 실행 불가능한 수학적 표기법과 실행 가능한 코드 사이의 격차를 해소하는 것을 목표로 하며, 잠재적으로 확률 미분 방정식과 같은 복잡한 수학적 문제를 해결하는 데 도움을 줄 수 있습니다.",
      "이 발전은 고보안 시스템 및 자동 정리 증명과 같은 중요한 응용 프로그램에서 형식 검증의 신뢰성과 효율성을 향상시킬 수 있기 때문에 중요합니다."
    ],
    "points": 155,
    "commentCount": 47,
    "retryCount": 0,
    "time": 1722206076
  },
  {
    "id": 41100958,
    "title": "Cloudflare가 이미지 서비스에 대해 우리에게 과도한 요금을 부과하고 있나요?",
    "originLink": "http://jpetazzo.github.io/2024/07/26/cloudflare-images-overcharge-billing/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41100958",
    "commentBody": "",
    "originSummary": [
      "Cloudflare Images의 혼합 청구 모델은 선불 저장과 후불 전달을 결합하여 EphemeraSearch에 예상치 못한 높은 청구서와 혼란을 초래했으며, 때로는 예상했던 $110 대신 $400을 초과하기도 했습니다.",
      "8개월 동안 Cloudflare 지원팀과 여러 차례 연락을 했음에도 불구하고 해결책을 받지 못해 S3나 전용 서버와 같은 더 비용 효율적인 솔루션으로 전환하게 되었습니다.",
      "이 경험은 수익이 낮은 인디 프로젝트에 있어 효율적인 지출의 중요성을 강조하며, Cloudflare Images가 양질의 서비스를 제공하지만 그 요금 모델이 모든 사용자에게 적합하지 않을 수 있음을 시사합니다."
    ],
    "commentSummary": [
      "Cloudflare가 이미지 서비스에 대해 과도한 요금을 부과할 가능성에 대한 우려가 제기되었으며, 사용자들은 예상 비용과 실제 비용 간의 차이를 보고하고 있습니다.",
      "비용 효율적인 대안으로 인식되는 Amazon S3, Bunny CDN, Cloudflare R2와 같은 다른 서비스와 비교되고 있습니다.",
      "Cloudflare의 청구 관행과 고객 지원이 주목받고 있으며, 일부 사용자는 복잡한 청구 주기와 예상치 못한 요금을 경험하고 있습니다."
    ],
    "points": 137,
    "commentCount": 73,
    "retryCount": 0,
    "time": 1722264957
  },
  {
    "id": 41098141,
    "title": "슈퍼 닌텐도 비디오 시스템의 설계를 이해하기",
    "originLink": "https://fabiensanglard.net/snes_video/index.html",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41098141",
    "commentBody": "",
    "originSummary": [
      "파비앙 상라르의 슈퍼 닌텐도(SNES) 비디오 시스템 탐구는 1989년 닌텐도 엔지니어들이 CRT TV와 NTSC 표준과의 호환성을 보장하기 위해 내린 설계 결정을 강조합니다.",
      "SNES는 21.47727MHz의 마스터 클럭을 사용했으며, 이를 나누어 5.3693175MHz의 도트 클럭을 달성했습니다. 이로 인해 한 줄당 341개의 도트와 60.098Hz의 새로 고침 빈도가 발생하며, 수평 및 수직 블랭킹 기간을 통해 아티팩트를 방지했습니다.",
      "SNES는 NTSC와 PAL 표준을 모두 지원했으며, 컴포지트 및 S-비디오 출력을 제공하고 특정 애플리케이션을 위해 수직 및 수평 해상도를 두 배로 늘릴 수 있었지만 깜박임과 같은 문제도 있었습니다."
    ],
    "commentSummary": [
      "이 게시물은 슈퍼 닌텐도 엔터테인먼트 시스템(SNES)의 디자인과 아키텍처에 대해 논의하며, 그 기술 사양과 역사적 배경을 강조합니다.",
      "주요 사항에는 SNES의 해상도 옵션, 게임 플레이에 미치는 다양한 TV 표준(NTSC vs. PAL)의 영향, 그리고 아케이드 게임과 가정용 콘솔에서 CRT(음극선관)의 사용이 포함됩니다.",
      "논의는 또한 유럽 TV에서 SCART 커넥터의 사용과 SNES의 비디오 출력을 정확하게 에뮬레이트하는 데 따른 어려움에 대해서도 다룹니다."
    ],
    "points": 134,
    "commentCount": 59,
    "retryCount": 0,
    "time": 1722231398
  },
  {
    "id": 41095814,
    "title": "무작정 `emplace_back`을 `push_back`보다 선호하지 마세요 (2021)",
    "originLink": "https://quuxplusone.github.io/blog/2021/03/03/push-back-emplace-back/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41095814",
    "commentBody": "",
    "originSummary": [
      "clang-tidy와 PVS-Studio와 같은 도구는 `push_back`을 \"나쁜 스타일\"로 표시하고 `emplace_back`을 제안할 수 있지만, 이 변경이 항상 유익한 것은 아닙니다.",
      "임시 객체 생성을 피하기 위해 `emplace_back`을 사용해야 하지만, 이는 이동 의미론과 관련이 없으며 올바르게 사용하지 않으면 여전히 복사가 발생할 수 있습니다.",
      "간단함과 더 빠른 컴파일 시간을 위해 `push_back`을 선호하고, 이동할 수 없는 타입이나 임시 객체를 피하기 위해 필요한 경우에만 `emplace_back`을 사용하십시오."
    ],
    "commentSummary": [
      "논의는 벡터와 같은 컨테이너에 요소를 추가하기 위해 C++에서 `emplace_back`과 `push_back`을 사용하는 것에 중점을 둡니다.",
      "emplace_back은 불필요한 복사를 피하면서 객체를 제자리에 생성하는 반면, push_back은 이미 생성된 객체를 컨테이너에 추가합니다.",
      "대화는 `emplace_back`이 더 효율적일 수 있지만 더 복잡하기도 하며, 특정한 `emplace_back`의 이점이 필요하지 않는 한 일상적인 사용에서는 `push_back`이 더 바람직할 수 있음을 강조합니다."
    ],
    "points": 134,
    "commentCount": 100,
    "retryCount": 0,
    "time": 1722199323
  },
  {
    "id": 41096187,
    "title": "OCaml에서의 고차원 경계 다형성 (2021)",
    "originLink": "https://okmij.org/ftp/ML/higher-kind-poly.html",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41096187",
    "commentBody": "",
    "originSummary": [
      "타입 생성자를 추상화하는 고차원 다형성은 컬렉션에 대한 제네릭 연산과 타입이 지정된 도메인 특화 언어(DSL)의 내장에 필수적입니다.",
      "OCaml은 타입 별칭 문제로 인해 고차원 다형성을 본래적으로 지원하지 않지만, 펑터, 함수 해체, 초기 대수 구조를 사용하여 이를 시뮬레이션할 수 있습니다.",
      "여러 가지 방법, 예를 들어 펑터 추상화와 일반 다형성으로의 축소 등을 통해 OCaml에서 고차 다형성을 달성할 수 있지만, 때로는 그것이 필요하지 않을 수도 있습니다."
    ],
    "commentSummary": [
      "OCaml에서 고차원 경계 다형성에 대한 논의는 타입 별칭과 타입 동등성 문제에 중점을 두며, 이는 고차원 통합 문제로 이어집니다.",
      "이러한 문제들의 실용적인 처리 가능성은 Idris 언어와 András Kovács의 'Elaboration Zoo' 튜토리얼을 참조하여 강조됩니다.",
      "OCaml의 GADT(일반화된 추상 데이터 타입) 문법에 대한 설명과 현재 GADT 지원이 없는 F#과의 비교."
    ],
    "points": 132,
    "commentCount": 9,
    "retryCount": 0,
    "time": 1722202847
  },
  {
    "id": 41098488,
    "title": "전문가가 말하길, 아이들은 지루함을 느낄 수 있어야 한다 (2013)",
    "originLink": "https://www.bbc.com/news/education-21895704",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41098488",
    "commentBody": "",
    "originSummary": [
      "교육 전문가인 테레사 벨튼 박사는 아이들이 지루함을 경험하는 것이 창의성을 키우는 데 중요하다고 주장하며, 끊임없는 활동이 상상력을 저해할 수 있다고 말합니다.",
      "작가 미라 샤얄과 예술가 그레이슨 페리와 같은 창작자들과의 인터뷰는 지루함이 그들의 창의적 발전에 중요한 역할을 했음을 보여주며, 페리는 이를 '창의적 상태'라고 묘사했습니다.",
      "벨튼 박사는 사회가 끊임없는 자극을 기대하는 것이 아이들이 내면의 창의력을 발달시키는 것을 방해한다고 강조하며, 상상력을 자극하기 위해 화면에서 벗어나 '멍 때리기' 시간을 가질 것을 권장합니다."
    ],
    "commentSummary": [
      "한 전문가는 아이들이 지루함을 경험하도록 허용해야 한다고 제안하는데, 이는 창의성과 자립심을 키울 수 있기 때문이다.",
      "과거 어린 시절의 경험을 되돌아보면, 사용자들은 위험하지만 사회적으로 풍요로운 활동에 참여했던 것을 회상하며, 현대 아이들의 화면 기반 과잉 자극과 대조를 이룹니다.",
      "논의는 지루함과 안전의 균형을 강조하며, 아이들이 탐구하고 성장할 수 있는 감독된 환경을 옹호합니다."
    ],
    "points": 113,
    "commentCount": 160,
    "retryCount": 0,
    "time": 1722237432
  },
  {
    "id": 41100820,
    "title": "Yark: 오프라인 UI를 갖춘 YouTube 아카이버",
    "originLink": "https://github.com/Owez/yark",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41100820",
    "commentBody": "",
    "originSummary": [
      "Yark는 Python 3.9+와 선택적으로 FFmpeg를 필요로 하며, 간편한 설치 및 관리 명령어로 YouTube 아카이빙을 단순화합니다.",
      "사용자는 메타데이터, 비디오 및 썸네일이 포함된 디렉토리 기반 구조에 저장된 아카이브를 생성, 새로 고침 및 조회할 수 있습니다.",
      "이 도구는 오프라인 보기 기능을 지원하며, 라이트 모드와 다크 모드를 제공합니다. 또한, 저장소의 이슈 탭을 통해 기능 제안을 할 수 있습니다."
    ],
    "commentSummary": [
      "Yark는 오프라인 사용자 인터페이스를 갖춘 YouTube 아카이버로, 사용자가 YouTube 콘텐츠를 로컬에 저장할 수 있도록 도와줍니다.",
      "사용자들은 트위치에 대한 유사한 도구들을 논의하며, 대용량 MP4 파일 스트리밍과 특수 문자가 포함된 파일에 대한 HTTP 서버 요청 처리와 같은 문제들을 강조합니다.",
      "대화에는 버퍼링 문제를 피하기 위해 범위 요청을 지원하는 서버의 중요성과 같은 스트리밍에 대한 기술적 세부 사항이 포함되어 있으며, 실용적인 사용을 위해 VLC 또는 Nginx를 사용할 것을 권장합니다."
    ],
    "points": 103,
    "commentCount": 5,
    "retryCount": 0,
    "time": 1722263847
  },
  {
    "id": 41098974,
    "title": "MeTube: 셀프 호스팅 유튜브 다운로더",
    "originLink": "https://github.com/alexta69/metube",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41098974",
    "commentBody": "",
    "originSummary": [
      "새로운 Node 버전은 더 이상 32비트 ARM 빌드를 지원하지 않으며, 사용자는 업데이트를 위해 64비트 운영 체제로 마이그레이션해야 합니다.",
      "youtube-dl (yt-dlp 포크)를 위한 웹 GUI가 이제 제공되며, YouTube 및 기타 사이트에서 재생목록 다운로드를 지원하고 Docker 또는 docker-compose를 사용하여 실행할 수 있습니다.",
      "구성 옵션에는 사용자 ID, 그룹 ID, 다운로드 디렉토리 등을 위한 환경 변수가 포함되며, 설정의 용이성을 위해 기본값이 제공됩니다."
    ],
    "commentSummary": [
      "MeTube는 YouTube에서 동영상을 다운로드하는 인기 있는 명령줄 도구인 yt-dlp를 사용하는 자체 호스팅 YouTube 다운로더입니다.",
      "이 프로젝트는 yt-dlp를 위한 사용자 인터페이스(UI)를 제공하여 명령줄 작업보다 그래픽 프론트 엔드를 선호하는 사용자들이 접근할 수 있도록 합니다.",
      "논의는 다양한 대안과 관련 도구들, 예를 들어 Celluloid, Parabolic, Tube Archivist 등을 강조하며, 이들이 서로 다른 플랫폼과 사용 사례에 대해 유사한 기능을 제공한다고 언급합니다."
    ],
    "points": 93,
    "commentCount": 37,
    "retryCount": 0,
    "time": 1722243581
  },
  {
    "id": 41097228,
    "title": "행성 파괴의 기술: 크로노캠 (2013)",
    "originLink": "https://www.forrestthewoods.com/blog/tech_of_planetary_annihilation_chrono_cam/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41097228",
    "commentBody": "",
    "originSummary": [
      "Uber Entertainment의 실시간 전략 게임인 Planetary Annihilation이 베타 단계에 진입했으며, 절차적 행성 생성 및 40인 플레이어 게임과 같은 혁신적인 기술을 특징으로 합니다.",
      "이 게임은 ChronoCam이라는 독특한 리플레이 시스템을 도입하여 플레이어가 시간을 되돌아가거나, 느리게/빠르게 재생하거나, 심지어 실시간 게임 중에도 다양한 시점에서 게임 세계를 볼 수 있게 합니다.",
      "클라이언트-서버 아키텍처를 활용하여, ChronoCam은 게임 데이터를 곡선으로 표현함으로써 대역폭 사용을 최소화하고, 강력한 리플레이 기능을 지원하여 반치트 조치와 온라인 커뮤니티 참여를 강화합니다."
    ],
    "commentSummary": [
      "플래너터리 애니힐레이션(Planetary Annihilation)은 실시간 전략(RTS) 게임으로, 플레이어가 과거 게임 상태를 검토하고 상호작용할 수 있는 크로노캠(ChronoCam)이라는 독특한 시간 스크러빙 메커니즘을 특징으로 합니다.",
      "그 게임은 처음에 매우 성공적인 킥스타터 캠페인을 통해 220만 달러를 모금했지만, 여러 개의 구형 전장을 포함한 야심찬 디자인으로 인해 도전에 직면했습니다.",
      "초기 비판에도 불구하고, 게임의 후속작인 Planetary Annihilation: Titans는 스팀에서 긍정적인 평가를 받았으며, 개발자들의 기술적 성과와 혁신적인 엔진 디자인이 주목받았습니다."
    ],
    "points": 85,
    "commentCount": 28,
    "retryCount": 0,
    "time": 1722215260
  },
  {
    "id": 41095429,
    "title": "SD카드 마모 균등화 및 변환 계층 (2014)",
    "originLink": "https://msreekan.com/2014/01/15/sdcard/",
    "originBody": "",
    "commentLink": "https://news.ycombinator.com/item?id=41095429",
    "commentBody": "",
    "originSummary": [
      "SD 카드에는 NAND MLC(멀티 레벨 셀) 또는 SLC(싱글 레벨 셀) 플래시 메모리가 사용되며, 블록 지우기 및 마모 균등화와 같은 복잡성을 추상화합니다.",
      "카드는 전압 공급 시 SPI(직렬 주변 장치 인터페이스) 또는 SD 버스를 사용할지 감지하고 적절한 소프트웨어 스택을 시작하여 소프트웨어가 전송 상태에 들어가면 부팅 과정을 완료합니다.",
      "번역 레이어는 가상 주소를 물리 주소로 매핑하여 연속적인 쓰기를 통해 쓰기 성능을 최적화하고, 일반적으로 4MB 크기의 할당 단위(AU) 전반에 걸쳐 랜덤 쓰기의 오버헤드를 관리합니다."
    ],
    "commentSummary": [
      "한 회의에서 고장난 SD 카드를 분해하는 일화가 착용 균등화 버그를 강조했는데, 이 버그로 인해 펌웨어가 부분적으로 덮어쓰여져 SD 카드의 신뢰성에 대한 논의가 촉발되었습니다.",
      "사용자들은 SD 카드 고장 및 데이터 복구 경험을 공유하면서, 더 높은 밀도의 메모리 카드가 문제를 일으킬 가능성이 더 크고, 산업용 등급의 카드가 비록 용량은 작지만 더 내구성이 뛰어나다고 언급했습니다.",
      "SD 카드의 신뢰성을 향상시키기 위한 제안에는 쓰기 집계 및 마모 균등화를 위한 더 나은 소프트웨어와, 마모된 블록을 관리하기 위한 자동 파티션 크기 조정 SD 카드가 포함되었습니다."
    ],
    "points": 84,
    "commentCount": 55,
    "retryCount": 0,
    "time": 1722195380
  }
]
